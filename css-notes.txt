How to style!
My biggest takeaway: stop watching start doing

CSS VALIDATOR: jigsaw.w3.org/css-validator/

There are three types of CSS styling: inline, internal, and external
Inline is like so:
    <body style="background: black; height: 100px;">
Internal is where you include a <style></style> box in the <head> of a document, and add the styles like seen below
External (probably the one I'm going with):
    Link a file (style.css) to the html file by using <link rel="stylesheet", href="style.css"> in the <head> tag
    If you want to uniquely edit a certain aspect, create an id using <tag id="name"> and then use #name{css stuff} to reference them
    If wanted a class of objects, use <tag class="name"> and then use tag.name or .name to reference them

Some common ones:

img {
    <!--this is where css declarations go, common ones include: -->
    width: 100px;
    height: 100px;
    border-radius: 10px;
    float: left; --> pushes image to left
    margin-right: 10px; --> distance between image and text on the right
    object-fit: cover;  --> image covers the image box (whatever width/height you define that the image might not fit)
}
p {
    font-weight: bold;
    font-style: normal;
    colour: blue;  or colour: rgb(1, 1, 1);  you can also use hexcode (just paste the hexcode)
    font-family: verdana, arial;   --> font! (with backup)
    font-size: 16px; --> 16 is standard, can also use 1em (16px and scales with multiplier so 2em would be 32px)
    font-weight: bold;
    font-style: italic;
}

p.class {
    <!--applies to all paragraphs with the class "class"-->
}

.class {
    <!--applies to all classes called "class", not just paragraphs-->
}


To add fonts:
    You can add fonts through a link:  <link href="fonts.google.com link"> under the <head> tag and then you can use them in your CSS file
    can also include the files for the fonts in your directory, just use the ttf file and then do the following at the top of the CSS file:
        @font-face{
            src: url(filepath);
            font-family: font_name;
        }
        And do this separately for all fonts that you uploaded 

Borders:
h1 {
    border-style: solid;   (dashed, dotted, double, groove, ridge, inset, outset, none)
    border-width: 2px;
    border-colour: blue;
    border-radius: 5px;    --> round corners
    border-bottom: 3px, solid, red;
}
can also include the first three lines in one line: border: 3px solid black;

Text/Box Shadows:
p{
    text-shadow: 3px 5px 2px red;   --> right shift, down shift, blur, colour   - you can add multiple shaoows in one text-shadow, just add comma
}
div.box1{
    background-colour: grey;
    box-shadow: 3px, 3px, 2px, black;  --> same as text-shadow
}


Margin:
body{
    margin: 0px;
}
.box{
    border: 5px solid;
    font-size: 2em;
}
#box1{
    margin-top: 50px;  --> you can also use margin: 50px; to set all of them. can also use margin: auto; makes it as much as possible on all sides
    margin-bottom, margin-right, margin-left;
}

Float: to wrap around box elements (like divs and imgs)
body{
    display: flow-root;   --> anything thats floating stays in the body and doesnt overflow
}
#img1{
    float: left; --> image is on the left of the screen
    margin: 10px;
}

Overflow: define what happens when items overflow the container
div{
    border: 2px;
    height: 75px;
    overflow: visible; (default is visible, also hidden, clip, scroll, auto - diplays scroll bar only when needed)
    overflow-clip-margin: 12px;   --> used in tandem with clip to define how much it is allowed to overflow, defaults to 0
}

Display:
    Default display values are inline or block-level. Block-level starts on a new line and takes up the entire line, where inline do not do either.
    For example, div p and h1 are block-level, whereas span a and img are inline.

span{
    display: block;  --> now it will act as a block element and you can diplay a width and height
}
div{
    display: inline;  --> self explanatory
}
span.special{
    display: inline-block;  --> block but inline (so you can apply a width/height)
    visibility: hidden;   --> still takes up the space but just cant see it
}


Width/Height:
.box{
    border: 2px solid;
    padding: 25px;
    height: auto;
    width: 50%;    --> takes up half the page
    float: left;   --> this wont put them on the same line because of the border taking up space. if you deleted the border they would be inline
    max-width: 25%;   --> caps the max width (the 50% gets overruled), can also use min-width
}   --> to disregard border + padding, add box-sizing: border-box;
.container{
    height: 100vh;  --> 100% of the viewport height
}


Position:
div{
    position: {relative, fixed, absolute, sticky, static}
    in order, give some values like top/left to move it and it gets moved and stays relative, stays fixed to the viewport (even when scrolling), 
    stays relative to an ancestor (think superclass), based on scroll bar position (stays in place when you scroll past it), default position
}

Background image:
body{
    background-image: url(./background.jpg);   --> if the image isn't big enough it'll repeat itself automatically
    background-repeat: no-repeat;
    background-position: center;
    background-attachement: fixed;   --> fixed doesn't move with scroll
    background-size: cover;   --> fits to entire size
}

Combinators:
      = descendant (space)
    > = child
    ~ = general sibiling
    + = adjacent sibiling

<div id="container"> 
    <p> P1 </p>
    <div>
        <p> P2 </p>
    </div>
</div>
<p> P3 </p>
<p> P4 </p>

#container p{    --> descendant
    background-color: yellow;    --> highlights p1 and p2
}
#container > p{    --> descendant
    background-color: yellow;    --> highlights p1 only
}
#container ~ p{    --> descendant
    background-color: yellow;    --> highlights p3 and p4 because they are under the same body
}
#container + p{    --> descendant
    background-color: yellow;    --> highlights p3 only because it is the next adjacent sibling
}
